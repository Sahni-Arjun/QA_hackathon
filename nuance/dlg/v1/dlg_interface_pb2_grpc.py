# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from nuance.dlg.v1 import dlg_messages_pb2 as nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2


class DialogServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Start = channel.unary_unary(
                '/nuance.dlg.v1.DialogService/Start',
                request_serializer=nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.StartRequest.SerializeToString,
                response_deserializer=nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.StartResponse.FromString,
                )
        self.Execute = channel.unary_unary(
                '/nuance.dlg.v1.DialogService/Execute',
                request_serializer=nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.ExecuteRequest.SerializeToString,
                response_deserializer=nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.ExecuteResponse.FromString,
                )
        self.ExecuteStream = channel.stream_stream(
                '/nuance.dlg.v1.DialogService/ExecuteStream',
                request_serializer=nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.StreamInput.SerializeToString,
                response_deserializer=nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.StreamOutput.FromString,
                )
        self.Stop = channel.unary_unary(
                '/nuance.dlg.v1.DialogService/Stop',
                request_serializer=nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.StopRequest.SerializeToString,
                response_deserializer=nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.StopResponse.FromString,
                )


class DialogServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Start(self, request, context):
        """Starts a conversation.
        Returns a **StartResponse** object.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Execute(self, request, context):
        """Used to continuously interact with the conversation based on end user input or events.
        Returns an **ExecuteResponse** object that will contain data related to the dialog interactions and that can be 
        used by the client to interact with the end user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteStream(self, request_iterator, context):
        """Performs recognition on streamed audio using ASRaaS and provides speech synthesis using TTSaaS.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """Ends a conversation and performs cleanup.
        Returns a **StopResponse** object.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DialogServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Start': grpc.unary_unary_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.StartRequest.FromString,
                    response_serializer=nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.StartResponse.SerializeToString,
            ),
            'Execute': grpc.unary_unary_rpc_method_handler(
                    servicer.Execute,
                    request_deserializer=nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.ExecuteRequest.FromString,
                    response_serializer=nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.ExecuteResponse.SerializeToString,
            ),
            'ExecuteStream': grpc.stream_stream_rpc_method_handler(
                    servicer.ExecuteStream,
                    request_deserializer=nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.StreamInput.FromString,
                    response_serializer=nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.StreamOutput.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.StopRequest.FromString,
                    response_serializer=nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.StopResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nuance.dlg.v1.DialogService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DialogService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nuance.dlg.v1.DialogService/Start',
            nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.StartRequest.SerializeToString,
            nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.StartResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Execute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nuance.dlg.v1.DialogService/Execute',
            nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.ExecuteRequest.SerializeToString,
            nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.ExecuteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/nuance.dlg.v1.DialogService/ExecuteStream',
            nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.StreamInput.SerializeToString,
            nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.StreamOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nuance.dlg.v1.DialogService/Stop',
            nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.StopRequest.SerializeToString,
            nuance_dot_dlg_dot_v1_dot_dlg__messages__pb2.StopResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
